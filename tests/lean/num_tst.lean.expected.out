  Set: pp::colors
  Set: pp::unicode
  Imported 'num'
  Imported 'tactic'
  Using: num
  Assumed: a : num::num
num::one + num::succ num::one
====>
num::succ (num::succ (num::succ num::zero))
num::one + num::succ num::one = num::succ (num::succ (num::succ num::zero))

num::succ (num::succ num::one) * num::succ num::one
====>
num::succ (num::succ (num::succ (num::succ (num::succ (num::succ num::zero)))))
num::succ (num::succ num::one) * num::succ num::one =
num::succ (num::succ (num::succ (num::succ (num::succ (num::succ num::zero)))))

  Proved: T1 : num::one * num::succ num::one = num::succ num::one
  Proved: T2 : a * num::succ num::one = a + a
  Proved: T3 : num::one = num::succ num::zero
  Set: simplifier::unfold
  Defined: two : num::num
  Defined: three : num::num
  Defined: four : num::num
  Set: lean::pp::implicit
  Proved: test : @eq num::num (num::fact four) (four * three * two)
